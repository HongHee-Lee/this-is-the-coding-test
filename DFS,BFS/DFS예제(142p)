#깊이 우선 탐색 알고리즘인 DFS는 스택 자료구조에 기초한다는 점에서 구현이 간단하다.
#또한 DFS는 스택을 이용하는 알고리즘이기 때문에 실제 구현은 재귀 함수를 이용했을 때 매우 간결하게 구현할 수 있다.

#------------------------------------------------------------------------------

#동빈님 코드 공부해서 거의 그대로 구현

n=int(input('노드의 개수를 입력해주세요. : '))
graph=[list(map(int, input('각 노드의 연결 정보를 입력해주세요. : ').split())) for i in range(n+1)]
visited=[False]*(n+1)


def dfs(visited, v, graph):
    visited[v]=True
    print(v, end=' ')
    
    for i in graph[v]:
        if not visited[i]:
            dfs(visited, i, graph)
 
dfs(visited, 1, graph)

"""
input
8

'' #블랭크 입력
2 3 8
1 7
1 4 5
3 5
3 4
7
2 6 8
1 7

output
1 2 7 6 8 3 4 5 
"""    

#------------------------------------------------------------------------------

#blank입력을 하고싶지 않을 경우 코드를 살짝 바꿔줘 볼 수도 있다.
n=int(input('노드의 개수를 입력해주세요. : '))
graph=[list(map(int, input('각 노드의 연결 정보를 입력해주세요. : ').split())) for i in range(n)]
visited=[False]*(n)


def dfs(visited, v, graph):
    visited[v-1]=True               #바꾼 부분
    print(v, end=' ')
    
    for i in graph[v-1]:            #바꾼 부분
        if not visited[i-1]:        #바꾼 부분
            dfs(visited, i, graph)
 
dfs(visited, 1, graph)

"""
input
8

2 3 8
1 7
1 4 5
3 5
3 4
7
2 6 8
1 7

output
1 2 7 6 8 3 4 5 
"""
