#스택 126p 풀이

#삽입은 append
#삭제는 pop

#5,2,3,7,삭제(del),1,4,삭제(del) 의 표현

array=list(map(str,input('공백을 두고 차례대로 입력해주세요. : ').split()))
li=[]
for a in array:
    if a=='del':
        li.pop()
    else:
        li.append(a)

print(li) #최하단 원소부터 출력
print(li[::-1]) #최상단 원소부터 출력

"""
input
5 2 3 7 del 1 4 del
output
['5', '2', '3', '1']
['1', '3', '2', '5']
"""

#-----------------------------------------------------------------------------

#동빈님 코드
stack = []

# 삽입(5) - 삽입(2) - 삽입(3) - 삽입(7) - 삭제() - 삽입(1) - 삽입(4) - 삭제()
stack.append(5)
stack.append(2)
stack.append(3)
stack.append(7)
stack.pop()
stack.append(1)
stack.append(4)
stack.pop()

print(stack) # 최하단 원소부터 출력
print(stack[::-1]) # 최상단 원소부터 출력

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------

#큐 129p풀이
#먼저 온 사람이 먼저 들어가게 된다. 나중에 온 사람일수록 나중에 들어가기 때문에 흔히
#'공정한' 자료구조라고 비유된다. 이러한 구조를 선입선출(First In First Out)구조라고 한다.


#공부한 후 내코드

from collections import deque

array=list(map(str,input('자료구조를 입력해주세요. : ').split()))

queue=deque()   #큐를 구현하기 위해 deque 라이브러리 사용                    
for a in array:
    if a=='del':
        queue.popleft()
    else:
        queue.append(a)
print(queue) #최하단 원소부터 출력
#print(queue[::-1]) ---> 이거 안먹힘.
#print(queue.reverse()) ---> 이거도 안먹힘.
queue.reverse() #최상단 원소부터 출력
print(queue)


"""
input
5 2 3 7 del 1 4 del
output
['3', '7', '1', '4']
['4', '1', '7', '3']
"""

#-----------------------------------------------------------------------------

#동빈님 코드

from collections import deque 
# 큐(Queue) 구현을 위해 deque 라이브러리 사용
queue = deque()

# 삽입(5) - 삽입(2) - 삽입(3) - 삽입(7) - 삭제() - 삽입(1) - 삽입(4) - 삭제()
queue.append(5)
queue.append(2)
queue.append(3)
queue.append(7)
queue.popleft()
queue.append(1)
queue.append(4)
queue.popleft()

print(queue) # 먼저 들어온 순서대로 출력
queue.reverse() # 다음 출력을 위해 역순으로 바꾸기
print(queue) # 나중에 들어온 원소부터 출력
