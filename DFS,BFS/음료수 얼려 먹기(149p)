#DFS를 이용하면 간단히 해결할 수 있다.

#1. 특정한 지점의 주변 상, 하, 좌, 우를 살펴본 뒤에 주변 지점 중에서 값이 '0'이면서 아직 방문하지 않은 지점이 있다면 해당 지점을 방문한다.
#2. 방문한 지점에서 다시 상, 하, 좌, 우를 살펴본면서 방문을 다시 진행하면, 연결된 모든 지점을 방문할 수 있다.
#3. 1~2번의 과정을 모든 노드에 반복하며 방문하지 않은 지점의 수를 센다.

#동빈님 코드 외워서 쓰기.
#아직 dfs 함수 부분 완벽하게 이해하지 못함.
n,m=map(int, input('행과 열을 입력해주세요. : ').split())

#graph= [list(map(int,input('맵의 정보를 입력해주세요. : ').split())) for i in range(5)] #오히려 split안됨. [[111100000], 이런식으로 뜸.

graph=[list(map(int,input('공백 없이 맵의 정보를 입력해주세요. : '))) for i in range(n)]  #[[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0],

def dfs(x,y):
    if x<=-1 or x>=n or y<=-1 or y>=m:
        return False
    if graph[x][y]==0:
        graph[x][y]=1
        dfs(x-1, y)
        dfs(x+1, y)
        dfs(x,y-1)
        dfs(x,y+1)
        return True
    return False

count=0
for i in range(n):
    for j in range(m):
       if dfs(i,j)==True:
           count+=1
print(count)

"""
input
00000111100000
11111101111110
11011101101110
11011101100000
11011111111111
11011111111100
11000000011111
01111111111111
00000000011111
01111111111000
00011111111000
00000001111000
11111111110011
11100011111111
11100011111111

output
8
"""
