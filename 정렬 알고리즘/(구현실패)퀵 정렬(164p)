"""
호어(Hoare) 분할 방식에 따른 퀵정렬
리스트에서 첫 번째 데이터를 피벗으로 정한다.
피벗을 설정한 후 왼쪽에서부터 피벗보다 큰 데이터를 찾고, 오른쪽에서부터 피벗보다 작은 데이터를 찾는다.
그 다음 큰 데이터와 작은 데이터의 위치를 서로 교환해준다.

피벗보다 큰 데이터와 피벗보다 작은 데이터를 찾으면서 정렬을 수행해 나가는데,
왼쪽에서부터 찾는 값과 오른쪽에서부터 찾는 값의 위치가 엇갈리는 경우에는 '작은 데이터'와 '피벗'의 위치를 서로 변경한다.
...
피벗의 왼쪽에는 피벗보다 작은 데이터가 위치하고, 피벗의 오른쪽에는 피벗보다 큰 데이터가 위치하도록 하는 작업을 분할 Divide 혹은 파티션 Partition이라고 한다.

이후 왼쪽 리스트와 오른쪽 리스트에서도 각각 피벗을 설정하여 개별 정렬시킨다.

퀵 정렬에서는 이처럼 특정한 리스트에서 피벗을 설정하여 정렬을 수행한 이후에, 피벗을 기준으로 왼쪽 리스트와 오른쪽 리스트에서 각각 다시 정렬을 수행한다. 
재귀 함수와 동작 원리가 같다.
실제로 퀵 정렬은 재귀 함수 형태로 작성했을 때 구현이 매우 간결해진다.
...
<이것이 취업을 위한 코딩테스트다>, 나동빈, 165=167p
"""



#------------------------------------------------------------------------------------------------------------------
#동빈님 코드 그대로 옮겨온 것. 이해불가.

array = [5, 7, 9, 0, 3, 1, 6, 2, 4, 8]

def quick_sort(array, start, end):
    if start >= end: # 원소가 1개인 경우 종료
        return
    pivot = start # 피벗은 첫 번째 원소
    left = start + 1
    right = end
    while(left <= right):
        # 피벗보다 큰 데이터를 찾을 때까지 반복 
        while(left <= end and array[left] <= array[pivot]):
            left += 1
        # 피벗보다 작은 데이터를 찾을 때까지 반복
        while(right > start and array[right] >= array[pivot]):
            right -= 1
        if(left > right): # 엇갈렸다면 작은 데이터와 피벗을 교체
            array[right], array[pivot] = array[pivot], array[right]
        else: # 엇갈리지 않았다면 작은 데이터와 큰 데이터를 교체
            array[left], array[right] = array[right], array[left]
    # 분할 이후 왼쪽 부분과 오른쪽 부분에서 각각 정렬 수행
    quick_sort(array, start, right - 1)
    quick_sort(array, right + 1, end)

quick_sort(array, 0, len(array) - 1)
print(array)

#-----------------------------------------------------------------------------------------------------------

#파이썬의 장점을 살린 퀵 정렬

array = [5, 7, 9, 0, 3, 1, 6, 2, 4, 8]

def quick_sort(array):
    # 리스트가 하나 이하의 원소만을 담고 있다면 종료
    if len(array) <= 1:
        return array

    pivot = array[0] # 피벗은 첫 번째 원소
    tail = array[1:] # 피벗을 제외한 리스트

    left_side = [x for x in tail if x <= pivot] # 분할된 왼쪽 부분
    right_side = [x for x in tail if x > pivot] # 분할된 오른쪽 부분

    # 분할 이후 왼쪽 부분과 오른쪽 부분에서 각각 정렬을 수행하고, 전체 리스트를 반환
    return quick_sort(left_side) + [pivot] + quick_sort(right_side)

print(quick_sort(array))

#----------------------------------------------------------------------

#암기한 대로 써보기

array = [5, 7, 9, 0, 3, 1, 6, 2, 4, 8]

def quick_sort(array):
    if len(array)<=1:
        return array
    
    pivot=array[0]
    tail=array[1:]
    
    left_side=[x for x in tail if x<= pivot]
    right_side=[x for x in tail if x>pivot]
    
    return quick_sort(left_side) + [pivot] + quick_sort(right_side)  #pivot 이 아니라[pivot]임.

print(quick_sort(array))
