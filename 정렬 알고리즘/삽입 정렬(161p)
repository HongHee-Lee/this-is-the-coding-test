#삽입 정렬은 선택 정렬에 비해 구현 난이도가 높은 편이지만 선택 정렬에 비해 실행 시간 측면에서 더 효율적인 알고리즘으로 잘 알려져 있다.
#특히 삽입 정렬은 필요할 때만 위치를 바꾸므로 '데이터가 거의 정렬되어 있을 때' 훨씬 효율적이다. 
#선택 정렬은 현재 데이터의 상태와 상관없이 무조건 모든 원소를 비교하고 위치를 바꾸는 반면 삽입 정렬(Insertion Sort)은 그렇지 않다.

#삽입 정렬은 재미있는 특징이 있는데, 정렬이 이루어진 원소는 항상 오름차순을 유지하고 있다는 점이다.
<이것이 취업을 위한 코딩이다>, 나동빈, 161-163p

#------------------------------------------------------------------------------------------------------------------------------------

#구현 실패
#동빈님 코드 그대로 옮겨온
#삽입정렬
array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(1, len(array)):
    for j in range(i, 0,-1):    #i부터 1까지 감소하며 반복
        if array[j]<array[j-1]:
            array[j],array[j-1]=array[j-1],array[j]
        else:
            break
        
print(array)

#--------------------------------------------------------------------------------------------------------------------------------------

"""
<여기서 잠깐>
range 의 세번째 매개 변수
range 의 매개 변수는 3개(start, end, step)이다. 세 번째 매개 변수인 step에
-1이 들어가면 start 인덱스부터 시작해서 end+1 인덱스까지 1씩 감소한다.
앞의 코드에서는 j 변수가 i부터 1까지 1씩 감소한다.

본문중에서
삽입 정렬은 현재 리스트의 데이터가 거의 정렬되어 있는 상태라면 매우 빠르게 동작한다는 점이다.
퀵 정렬과 비교했을때, 보통은 삽입 정렬이 비효율적이나
정렬이 거의 되어 있는 상황에서는 퀵 정렬 알고리즘보다 더 강력하다.
따라서 거의 정렬되어 있는 상태로 입력이 주어지는 문제라면 퀵 정렬등의 여타 정렬 알고리즘을 이용하는 것보다
삽입 정렬을 이용하는 것이 정답 확률을 높일 수 있다.
<이것이 취업을 위한 코딩테스트다>, 나동빈, 164p
"""
